name: Run packer build on a template file

on:
  push:
    branches: [main]
jobs:
  packagebuild:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          clean: false
      - name: Set up JDK 8 for x64
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn compile

      - name: Test with Maven
        run: mvn test

      - name: Package with Maven
        run: |
          pwd
          ls
          mvn -B package --file pom.xml
          mkdir staging && cp target/*.jar staging && cp cloudwatch-config.json staging
          pwd
          ls -al

      - name: Upload jar file
        uses: actions/upload-artifact@v2
        with:
          name: webapp-artifact
          path: staging

      - name: Validate Packer Template
        uses: hashicorp/packer-github-actions@master
        with:
          command: validate
          target: ami.pkr.hcl
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}

      - name: Download jar file
        uses: actions/download-artifact@v2
        with:
          name: webapp-artifact

      - name: Packer build
        uses: hashicorp/packer-github-actions@master
        with:
          templateFile: 'ami.pkr.hcl'
          command: build
        env:
          PACKER_LOG: 1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
          AWS_DEFAULT_REGION: us-west-2

  aws_launch_template:
    name: AWS Launch Template
    needs: packagebuild
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
          aws-region: us-west-2

      - name: Launch Template
        run: |
          latestAmi=$(aws ec2 describe-images --filters "Name=owner-id,Values=097171053993" --query "sort_by(Images, &CreationDate)[-1].[ImageId]" --output "text")
          echo "latest ami:"
          echo $latestAmi
          latestLaunchTemplateId=$(aws ec2 describe-launch-templates --query "sort_by(LaunchTemplates, &CreateTime)[-1].[LaunchTemplateId]" --output "text")
          if [[ ${latestLaunchTemplateId} != 'None' ]]; then
            echo "latest template id:"
            echo $latestLaunchTemplateId

            latestAutoScalingGroupName=$(aws autoscaling describe-auto-scaling-groups --query "sort_by(AutoScalingGroups, &CreatedTime)[-1].[AutoScalingGroupName]" --output "text")
            echo "latest AutoScalingGroupName:"
            echo $latestAutoScalingGroupName

            aws autoscaling update-auto-scaling-group --auto-scaling-group-name  $latestAutoScalingGroupName --launch-template LaunchTemplateId=$latestLaunchTemplateId,Version='$Latest'

            latestVersion=$(aws ec2 describe-launch-templates --launch-template-id $latestLaunchTemplateId --query "sort_by(LaunchTemplates, &CreateTime)[-1].[LatestVersionNumber]" --output "text")
            echo "latestVersion:"
            echo $latestVersion

            integerVersion=[int]$latestVersion
            echo "integerVersion:"
            echo $integerVersion

            $incrementValue = 1

            $updatedVersion = $integerVersion + $incrementValue
            echo "updatedVersion:"
            echo $updatedVersion

            aws ec2 create-launch-template-version --launch-template-id $latestLaunchTemplateId --version-description $updatedVersion --source-version 1 --launch-template-data "ImageId=$latestAmi"

            aws autoscaling start-instance-refresh --auto-scaling-group-name $latestAutoScalingGroupName --preferences "InstanceWarmup=200"
          fi
